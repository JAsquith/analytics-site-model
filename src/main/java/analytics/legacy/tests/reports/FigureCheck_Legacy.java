package analytics.legacy.tests.reports;

import analytics.AnalyticsDriver;
import analytics.legacy.pages.*;
import analytics.legacy.tests.SISRATest;
import analytics.legacy.pages.helpers.ViewUpdate;
import analytics.utils.HtmlLogger;
import org.openqa.selenium.remote.DesiredCapabilities;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.testng.ITestContext;
import org.testng.annotations.AfterTest;
import org.testng.annotations.BeforeTest;
import org.testng.annotations.Parameters;
import org.testng.annotations.Test;

import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URISyntaxException;
import java.net.URL;
import java.text.SimpleDateFormat;
import java.util.*;
import java.util.concurrent.TimeUnit;

import static analytics.utils.HtmlLogger.Level;

/**
 * @author Milton
 * @version 1.0
 * @since 2016-02-28.
 */
public class FigureCheck_Legacy extends SISRATest {

    // Figure Checking variables
    private String liveWinHandle;
    private String devWinHandle;
    private final int DEFAULT_MAX_UPDATES = 5;
    private final int DEFAULT_UPDATE_PROBABILITY = 50;
    protected boolean isKS3 = false;

    private Map<String, Integer> viewCounts;

    public FigureCheck_Legacy(){
        super();
        currWinName = "LIVE";
    }

    /**
     * Logs that the test is being setup;<br>
     * creates a new {@link AnalyticsDriver};<br>
     * opens Live and Dev Analytics in separate windows/tabs;<br>
     * navigates to the Reports area and opens a report ready for the
     * views to be compared.
     * TestNG Annotations:<ul>
     * <li>@Parameters ({ "test-id", "live-user", "live-password",
     *                      "dev-user", "dev-password" })</li>
     * <li>@BeforeTest (alwaysRun = true)</li>
     * </ul>
     *
     * @param test_id     The testng.xml parameter "test-id", passed in as a String by
     *                    the TestNG test runner.
     * @param liveUsername The testng.xml parameter "live-user".
     * @param livePassword The testng.xml parameter "live-password".
     * @param devUsername The testng.xml parameter "dev-user".
     * @param devPassword The testng.xml parameter "dev-password".
     * @param testContext An object which implements the ITestContext Interface and
     *                    represents the context of the current test.
     * @throws MalformedURLException if the URL generated by
     *                               {@link AnalyticsDriver#getGridURL(ITestContext)} is
     *                               not valid.
     */
    @Parameters({"test-id", "live-user", "live-password", "dev-user", "dev-password"})
    @BeforeTest(alwaysRun = true)
    public void setupTest(String test_id,
                          String liveUsername, String livePassword,
                          String devUsername, String devPassword,
                          ITestContext testContext) throws MalformedURLException {

        /**********************************************************************
         * Log the start of this test, get the test settings and a driver, and
         * initialise variables to be used in the summary logging
         *********************************************************************/
        SimpleDateFormat logDate = new SimpleDateFormat("hh-mm-ss-a_");

        testParams = testContext.getCurrentXmlTest().getAllParameters();
        htmlLog = new HtmlLogger(
                getTestParameter("log-folder"),
                logLevel,
                logDate.format(new Date()) + testContext.getName());
        logPrefix = test_id;
        testStart = System.currentTimeMillis();
        viewCounts = new HashMap<String, Integer>();

        // Write the log file location to a test attribute so the TestListener get the zip files and email them
        testContext.setAttribute("logDirectory", htmlLog.getLogDirectory());

        viewCounts.put("Skipped", 0);
        viewCounts.put("Opened", 0);
        viewCounts.put("Updated", 0);
        viewCounts.put("Compared", 0);
        viewCounts.put("Matched", 0);
        viewCounts.put("Mismatched", 0);

        testContext.setAttribute("test_id", test_id);

        DesiredCapabilities caps = AnalyticsDriver.getCapabilities(testContext);
        URL gridURL = AnalyticsDriver.getGridURL(testContext);

        log("Getting RemoteWebDriver with: <br>"
                + caps.toString()
                + "<br>From hub at: " + gridURL.toString());
        driver = new AnalyticsDriver(testContext);

        try {driver.manage().window().maximize();}
        catch (Exception e) {System.out.println(e.getMessage());}
        testContext.setAttribute("session-id", driver.getSessionId().toString());
        log("Started RemoteWebDriver with session id: " + driver.getSessionId().toString()
                + " on machine with local address(es): " + findLocalIPAddresses());

        /**********************************************************************
         * Open LIVE and DEV Analytics in different tabs/windows
         *********************************************************************/
        //Get a handle to the window/tab where we will open Live Analytics,
        liveWinHandle = driver.getWindowHandle();

        //  log in, and go to Reports
        log("Logging in (with username " + liveUsername + ") and opening Reports Home");
        Login login = new Login(driver, currWinName);
        login.with(liveUsername, livePassword, true);
        login.waitForReload(DEFAULT_SHORT_TIMEOUT);
        ReportsHome reportsHome;
        reportsHome = new ReportsHome(driver, Base.LIVE_HOME);
        int liveKSCount = reportsHome.countKeyStages();

        // Open Dev Analytics in a new window/tab, get a handle on the new window object
        log("Opening new DEV window, logging in (with username " + devUsername + "), and opening Reports Home");
        String js = "window.open('" + Base.DEV_HOME + "','_blank');";
        driver.executeScript(js);

        WebDriverWait wait = new WebDriverWait(driver,30);
        wait.until(ExpectedConditions.numberOfWindowsToBe(2));

        this.setDevWindowHandle();

        //  log in, and go to Reports
        login = new Login(driver, currWinName);
        login.with(devUsername, devPassword, true);
        login.waitForReload(DEFAULT_SHORT_TIMEOUT);
        login.visit(Base.DEV_HOME+"Reports");
        int devKSCount = reportsHome.countKeyStages();

        /**********************************************************************
         * First Sanity Check
         * - Live & Dev should have same number of Keystages available
         *********************************************************************/
        if (devKSCount != liveKSCount)
            this.failWith("Significant Differences Between Schools - " +
                    "Different Keystages available in Live ("+liveKSCount+
                    ") and Dev ("+devKSCount+")");

        /**********************************************************************
         * Select the same Keystage & Cohort in Dev and Live
         *********************************************************************/
        // In LIVE
        this.switchToLive();
        String keystage = this.getTestParameter("keystage");
        isKS3 = keystage.equals("KS3");

        if(keystage.equals("")){
            keystage = reportsHome.selectKSAtRandom();
        } else {
            if (!reportsHome.selectKSByName(keystage))
                failWith("Keystage " + keystage + " not available in " + currWinName);
        }
        int liveCohortCount = reportsHome.countCohorts();

        String cohort = this.getTestParameter("cohort");
        if (cohort.equals("")) {
            cohort = reportsHome.selectCohortAtRandom();
        } else {
            if (!reportsHome.selectCohortByName(cohort))
                failWith("Cohort " + cohort + " not available in " + currWinName);
        }
        log("KEYSTAGE & COHORT: " + keystage + " > " + cohort);
        int liveReportsCount = reportsHome.countReports();

        // In DEV
        this.switchToDev();
        if (!reportsHome.selectKSByName(keystage))
            failWith("Keystage " + keystage + " not available in " + currWinName);
        
        int devCohortCount = reportsHome.countCohorts();

        if (!reportsHome.selectCohortByName(cohort))
            failWith("Cohort " + cohort + " not available in " + currWinName);

        log("KEYSTAGE & COHORT: " + keystage + " > " + cohort);
        int reportViewsCount = reportsHome.countReports();

        /**********************************************************************
         * Second Sanity Check
         * - Live & Dev should have same number of Cohorts available
         *********************************************************************/
        if (devCohortCount != liveCohortCount)
            failWith("Significant Differences Between Schools - Different " +
                    keystage + " Cohorts available in Live ("+liveCohortCount+
                    ") and Dev ("+devCohortCount+")");

        /**********************************************************************
         * Third Sanity Check
         * - Live & Dev should have same number of Reports available
         *********************************************************************/
        if (reportViewsCount != liveReportsCount)
            failWith("Significant Differences Between Schools - Different " +
                    keystage + " > " + cohort + " reports available in Live ("
                    +liveReportsCount+") and Dev ("+reportViewsCount+")");

        /**********************************************************************
         * Select the same Report in Dev and Live
         *********************************************************************/
        // In Live
        this.switchToLive();
        String reportName = reportsHome.openReportAtRandom();
        log("REPORT: " + reportName);

        // In Dev
        this.switchToDev();
        if (!reportsHome.openReportByName(reportName))
            failWith("Report " + reportName + " is not available in Live");

        log("REPORT: " + reportName);

        // Call updateFile to write buffered log lines to date to disk
        try {htmlLog.updateFile();}
        catch (IOException e) {e.printStackTrace();}
    }

    // Test Methods
    @Parameters({ "views-list" })
    @Test
    public void compareRandomViews(String viewsList) {
        log("Starting Test Method");
        Random random = new Random(System.currentTimeMillis());

        // Check for a couple of optional parameters
        int maxUpdates = DEFAULT_MAX_UPDATES;
        if (testParams.containsKey("max-view-updates"))
            maxUpdates = Integer.parseInt(getTestParameter("max-view-updates"));

        int updateProbability = DEFAULT_UPDATE_PROBABILITY;
        if (testParams.containsKey("view-options-probability"))
            updateProbability = Integer.parseInt(testParams.get("view-options-probability"));

        this.switchToLive();
        ReportView reportView = new ReportView(this);
        ArrayList<String> areasArray;

        // The views-list parameter is in the form 'x random views'
        // extract the x as an integer and add that many entries to the areasArray
        int viewCount = Integer.parseInt(viewsList.substring(0, viewsList.indexOf(' ')));
        String qualsOrSubjects = isKS3 ? "Subjects" : "Qualifications";
        String[] areas = {"Headlines", qualsOrSubjects, "Classes", "Students", "Student Detail"};
        areasArray = new ArrayList<>(viewCount);
        for (int i = 0; i < viewCount; i++)
            areasArray.add(areas[random.nextInt(areas.length)]);

        log("Opening " + viewCount + " views at random");

        // Save the number of views for the Summary logging
        viewCounts.put("Configured", viewCount);

        // Loop through the viewsArray
        viewsLoop:
        for (int i = 0, viewsArraySize = areasArray.size(); i < viewsArraySize; i++) {

            // Make sure the correct area (Headlines, Quals, etc) is open
            String areaName = areasArray.get(i);

            // Open the same (random) view in the chosen area on both Live and Dev
            String viewTypeAndName = this.openViewInLiveAndDev(reportView, areaName);
            log("View " + (i+1) + " of " + viewCounts.get("Configured") + ": "
                    + areaName + ">" + viewTypeAndName);
            if (viewTypeAndName.equals("")){
                // Oops! Something went wrong!
                logWithScreenshot(Level.ERROR, "***** Error opening a view *****", "ViewOpenError");
                break viewsLoop;
            }

            // Increment the count of successfully opened views
            viewCounts.replace("Opened", viewCounts.get("Opened") + 1);

            // Compare live and dev views
            log("Comparing '" + reportView.getViewName() + "' with no updates");
            boolean matched = this.compareViews(reportView);

            // Prepare for any updates we might apply
            ArrayList<ViewUpdate> updateHistory = new ArrayList<>();
            int updatesCount = 0;

            // Apply between zero and maxUpdates updates...
            while (matched && updatesCount < maxUpdates) {
                // Use the probability setting to decide whether to update or not
                // If so, apply a random update and return it as a ViewUpdate object
                // If null is returned, no update was applied and we can break to the
                // next entry in the viewsArray
                ViewUpdate update = this.applyViewUpdateProbabilistically(updateProbability);
                if (update == null)
                    break;

                // An update was applied so increment the update counts for the view and the test
                updatesCount++;
                viewCounts.replace("Updated", viewCounts.get("Updated") + 1);

                //  Store the update so we can roll it back later
                updateHistory.add(update);

                // Compare the updated live and dev views
                log("Comparing after update " + update.toString());
                matched = this.compareViews(reportView);
                if (!matched) {
                    log(Level.ERROR, "Updates applied before mismatch...");
                    for (ViewUpdate upd : updateHistory)
                        log(Level.ERROR, upd.toString());
                }
            }

            if (updatesCount > 0) {
                // Undo updates before continuing (column sorts are ignored)
                this.switchToLive();
                log("Reverting updates in Live");
                ReportViewOptions viewOptions = new ReportViewOptions(this);
                viewOptions.rollbackUpdates(updateHistory, false);

                this.switchToDev();
                log("Reverting updates in Dev, and clearing update history");
                viewOptions = new ReportViewOptions(this);
                viewOptions.rollbackUpdates(updateHistory, true);
            }

            // Call updateFile to write buffered log messages to disk
            try {
                htmlLog.updateFile();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }

        log("Ending Test Method");

        if (viewCounts.get("Mismatched") > 0){
            failWith("View data mismatches between Live and Dev. See detailed log file: " + htmlLog.getLogFileName());
        }
    }

    /**
     * If an {@link AnalyticsDriver} was successfully started for the test,
     * logs the session ID, quits the driver, then logs test completion.
     * TestNG Annotations: @AfterTest
     */
    @AfterTest
    public void tearDownTest() {

        if (driver != null) {
            log("Closing RemoteWebDriver session: " + driver.getSessionId().toString());
            this.switchToLive();
            try{
                new MainMenu(driver).clickLogout();
            } catch (Exception  e) {
                log(Level.WARN, "Encountered an exception while logging out. User session may remain active");
            }
            this.switchToDev();
            try{
                new MainMenu(driver).clickLogoutAndWait();
            } catch (Exception  e) {
                log(Level.WARN, "Encountered an exception while logging out. User session may remain active");
            }
            driver.quit();
        }
        log("|=======| TEST SUMMARY |=======|");
        try {
            log("Configured: " + viewCounts.get("Configured"));
            log("------------------------------");
            log("Skipped: " + viewCounts.get("Skipped"));
            log("Opened: " + viewCounts.get("Opened"));
            log("Updated: " + viewCounts.get("Updated"));
            log("------------------------------");
            log("Compared: " + viewCounts.get("Compared"));
            log("------------------------------");
            log("Matched: " + viewCounts.get("Matched"));
            log("Mismatched: " + viewCounts.get("Mismatched"));
        } catch (Exception e) {
            log(Level.WARN, "Encountered an exception reading view counts (setup may not have completed successfully)");
        }
        long diff = (System.currentTimeMillis() - testStart);
        //log("Test completed in " + (diff/1000) + " secs");
        String strDiff = String.format("%02d min, %02d sec",
                TimeUnit.MILLISECONDS.toMinutes(diff),
                TimeUnit.MILLISECONDS.toSeconds(diff) -
                        TimeUnit.MINUTES.toSeconds(TimeUnit.MILLISECONDS.toMinutes(diff))
        );
        log("Test completed in " + strDiff);
        log("|==============================|");
        try{htmlLog.closeAndAddToZip();}
        catch (IOException|URISyntaxException e){e.printStackTrace();}
    }

    private boolean compareViews(ReportView reportView){

        // TODO - check for no table and the "select a qualification" message
        boolean rowByRow = this.getTestParameter("row-by-row").equals("true");

        // Perform the comparison
        boolean matched = this.compareViews(reportView, rowByRow);

        // Increment the compared count
        viewCounts.replace("Compared", viewCounts.get("Compared") + 1);

        if (!matched){
            // The views don't match, increment the mismatch count
            // and return false
            viewCounts.replace("Mismatched", viewCounts.get("Mismatched") + 1);
            return false;
        }

        // Increment the match count and return true
        viewCounts.replace("Matched", viewCounts.get("Matched") + 1);
        return true;
    }

    private boolean compareViews(ReportView reportView, boolean compareRows){

        boolean matched;

        String viewType = reportView.getCurrentViewType();

        this.switchToLive();
        logWithScreenshot(Level.DEBUG, "View to be compared: " + reportView.getViewName(), reportView.getViewName());
        String liveData = reportView.getViewData();
        this.switchToDev();
        logWithScreenshot(Level.DEBUG, "View to be compared: " + reportView.getViewName(), reportView.getViewName());
        String devData = reportView.getViewData();

        // Compare the views
        String mismatchDataFile;
        if(liveData.equals(devData)) {
            matched = true;
        }
        else {
            mismatchDataFile = viewType+"_Mismatch.csv";
            logWithCSVFile(Level.ERROR, "'" + reportView.getViewName() + "' Mismatch", mismatchDataFile, liveData);

            logWithCSVFile(Level.ERROR, "'" + reportView.getViewName() + "' Mismatch", mismatchDataFile, devData);

            this.switchToLive();
            if (compareRows) {
                // TODO: Implement Row by Row comparisons
                log("TODO: Implement Row by Row comparisons");
            }
/*
            else {
                log(Level.INFO,"------------------------------");
                log(Level.ERROR, liveData);
                log(Level.INFO,"------------------------------");
                log(Level.ERROR, devData);
                log(Level.INFO,"------------------------------");
            }
*/
            matched = false;
        }
        return matched;
    }

    private ViewUpdate applyViewUpdateProbabilistically(int updateProbability){

        /*****************************************************
         *  Decide whether or not to update/drilldown and re-compare
         *****************************************************/
        Random random = new Random(System.currentTimeMillis());
        int centiDiceRollResult = random.nextInt(101);

        ReportViewOptions viewOptions = new ReportViewOptions(this);

        if (centiDiceRollResult > updateProbability)
            return null;

        this.switchToLive();
        String updateOption = viewOptions.getRandomUpdateType();
        log(Level.DEBUG, "Applying '" + updateOption + "' update");
        ViewUpdate update = viewOptions.updateView(updateOption);
        log(Level.DEBUG, update.toString());

        this.switchToDev();
        log(Level.DEBUG, "Update to be applied: " + updateOption);
        if (update != null)
            viewOptions.updateView(update);
        log(Level.DEBUG, update.toString());

        this.switchToLive();
        viewOptions.waitForReload();

        return update;
    }

    private String openViewInLiveAndDev(ReportView reportView, String areaName){

        String result = "";
        // In LIVE
        this.switchToLive();
        // Make sure we are in the right area (Headlines/Qualifications/etc)
        int switchResult = reportView.switchToViewArea(areaName);
        if (switchResult == -1) {
            logWithScreenshot(Level.ERROR,"Problem switching to '" + areaName + "'", areaName);
            return result;
        }

        // Open a random view
        String viewTypeAndName = reportView.openView("ANY", "ANY");
        String viewMenu = viewTypeAndName.split(">")[0];
        String viewName = viewTypeAndName.split(">")[1];

        // Store & log the chosen view
        String viewPathLog = areaName + ">" + viewMenu + ">" + viewName;
        log(Level.DEBUG, "OPENED: " + viewPathLog);

        // In DEV
        this.switchToDev();
        // Make sure we are in the right area (Headlines/Qualifications/etc)
        if (reportView.switchToViewArea(areaName, switchResult) == -1) {
            logWithScreenshot(Level.ERROR,"Problem switching to '" + areaName + "'", areaName);
            return result;
        }

        // Open the same view as we did in Live
        viewTypeAndName = reportView.openView(viewMenu, viewName);
        viewPathLog = areaName + ">" + viewTypeAndName;
        log(Level.DEBUG, "OPENED: " + viewPathLog);

        return viewTypeAndName;
    }

    /****
     * Private methods only below this line-------------------------------------
     */
    private void switchToLive(){
        currWinName = "LIVE";
        // If LIVE is already selected, don't waste a remote call
        if (driver.getWindowHandle().equals(liveWinHandle))
            return;
        driver.switchTo().window(liveWinHandle);
    }
    private void switchToDev(){
        currWinName = "DEV";
        // If DEV is already selected, don't waste a remote call
        if (driver.getWindowHandle().equals(devWinHandle))
            return;
        driver.switchTo().window(devWinHandle);
    }
    private void setDevWindowHandle(){
        Set<String> allWindows = driver.getWindowHandles();

        for (String window : allWindows) {
            if (!window.equals(liveWinHandle)) {
                devWinHandle = window;
                this.switchToDev();
                break;
            }
        }
    }
}