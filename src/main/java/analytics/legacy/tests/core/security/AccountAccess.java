package analytics.legacy.tests.core.security;

import analytics.AnalyticsDriver;
import analytics.legacy.pages.Login;
import analytics.legacy.pages.MainMenu;
import analytics.utils.PasswordGenerator;
import org.openqa.selenium.TimeoutException;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.remote.DesiredCapabilities;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.testng.Assert;
import org.testng.ITestContext;
import org.testng.annotations.*;
import org.testng.log4testng.Logger;

import java.net.MalformedURLException;
import java.net.URL;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;

import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.core.StringEndsWith.endsWith;

/**
 * Contains methods to test the <a href="https://www.sisraanalytics.co.uk">SISRA Analytics</a>
 * login page. <br>
 * A TestNG.xml file invoking this class should contain the standard grid and browser
 * specification parameters, and the following test specific parameters:<ul>
 *     <li>good-username</li>
 *     <li>bad-username</li>
 *     <li>blocked-username</li>
 *     <li>good-password</li>
 *     <li>blocked-password</li>
 * </ul>
 * Each username (plus the empty String) is paired with each password (plus a randomly
 * generated 'bad' password and the empty String). Each of these 16 pairs of username
 * and password is submitted via the login form by a different method marked with the
 * TestNG @SISRATest annotation. Any missing parameters will result in some test methods
 * being skipped.
 *
 * @author Milton Asquith
 * @version 1.0
 * @since 2016-02-19
 */
public class AccountAccess {

    //Standard SISRATest Class Objects
    private AnalyticsDriver driver;
    private Login loginPage;
    private MainMenu mainMenu;

    private WebDriverWait driverWait;
    private Logger TEST_LOGGER;
    private static long suiteStart;
    private long testStart;
    private String logPrefix;

    private final int VERY_SHORT_TIMEOUT = 5;

    private final String valMessage_BadUserOrPassword = "The user name or password provided is incorrect.";
    private final String valMessage_NoPassword = "Please enter a password.";
    private final String valMessage_NoUsername = "Please enter a username.";
    private final String blockedUserMessage = "Your account has been blocked, "
            + "please contact your SISRA administrator for more details.";

    // Two setup methods (one each for the Suite and the SISRATest)

    /***
     * Simply logs that the suite is starting. <br>
     * TestNG Annotations: @BeforeSuite.
     */
    @BeforeSuite
    public void setupSuite() {
        TEST_LOGGER = Logger.getLogger(this.getClass());
        log("===== Starting Test Suite =====");
        log("Account Access Tests");
        suiteStart = System.currentTimeMillis();
    }

    /**
     * Logs that the test is being setup, and creates new {@link AnalyticsDriver},
     * {@link Login}, and {@link MainMenu} objects for use in the @SISRATest methods. <br>
     * TestNG Annotations:<ul>
     *     <li>@Parameters ({ "test-id" })</li>
     *     <li>@BeforeTest (alwaysRun = true)</li>
     * </ul>
     *
     * @param test_id       The testng.xml parameter "test-id", passed in as a String by
     *                      the TestNG test runner.
     * @param testContext   An object which implements the ITestContext Interface and
     *                      represents the context of the current test.
     * @throws MalformedURLException if the URL generated by
     *                              {@link AnalyticsDriver#getGridURL(ITestContext)} is
     *                              not valid.
     */
    @Parameters({ "test-id" })
    @BeforeTest(alwaysRun = true)
    public void setupTest(String test_id, ITestContext testContext) throws MalformedURLException {
        logPrefix = testContext.getName() + " (" + test_id + ") - ";
        log("Setting Up");
        testStart = System.currentTimeMillis();
        DesiredCapabilities caps = AnalyticsDriver.getCapabilities(testContext);
        URL gridURL = AnalyticsDriver.getGridURL(testContext);
        driver = new AnalyticsDriver(testContext);
        loginPage = new Login (driver);
        loginPage.visit("HOME");
        mainMenu = new MainMenu(driver);
    }

    // Four test methods using the "good" username...

    /**
     * Uses the "good-username" and "good-password" parameters of the TestNG test to
     * attempt to log in to Analytics. <br>
     * Fails if: The browser address is not {@link Login#TEST_HOME} (because
     * login failure redirects back to "/Account/Login").<br>
     * TestNG Annotations:<ul>
     *     <li>@Parameters({ "good-username", "good-password" })</li>
     *     <li>@SISRATest</li>
     * </ul>
     *
     * @param usr   The {@code good-username} TestNG parameter.
     * @param pwd   The {@code good-password} TestNG parameter.
     */
    @Parameters({ "good-username", "good-password" })
    @Test
    public void validUserAndPassword(String usr, String pwd) {
        loginPage.with(usr, pwd, true);
        loginPage.visit("HOME");

        assertThat("The current URL is the application domain root...",
                driver.getCurrentUrl(), endsWith("sisraanalytics.co.uk/"));
        mainMenu.clickLogoutAndWait();
    }

    /**
     * Uses the "good-username" parameter of the TestNG test and a random String to
     * attempt to log in to Analytics. <br>
     * Fails if: <ul>
     *     <li>A single validation messages is not displayed after the login form is
     *     submitted.</li>
     *     <li>The displayed validation message does not match {@link #valMessage_BadUserOrPassword}</li>
     * </ul>
     * TestNG Annotations:<ul>
     *     <li>@Parameters({ "good-username" })</li>
     *     <li>@SISRATest</li>
     * </ul>
     *
     * @param usr   The {@code good-username} TestNG parameter.
     */
    @Parameters({ "good-username"})
    @Test
    public void validUserBadPassword(String usr) {
        String pwd = PasswordGenerator.getPassword(true,true);
        log("Using generated password: '" + pwd + "'");
        loginPage.with(usr, pwd);
        try {
            loginPage.waitForValidationMessages(VERY_SHORT_TIMEOUT);
            List<WebElement> valMessages = loginPage.getValidationMessages();
            assertThat("There should be a single validation message...",
                    valMessages.size(),is(1));
            assertThat("The 'user name or password is incorrect' validation message should be shown...",
                    valMessages.get(0).getText(), is(valMessage_BadUserOrPassword));
        } catch (TimeoutException e) {
            Assert.fail("Validation Message List not displayed.");
        }
    }

    /**
     * Uses the "good-username" and "blocked-password" parameters of the TestNG test to
     * attempt to log in to Analytics. <br>
     * Fails if: <ul>
     *     <li>A single validation messages is not displayed after the login form is
     *     submitted.</li>
     *     <li>The displayed validation message does not match {@link #valMessage_BadUserOrPassword}</li>
     * </ul>
     * TestNG Annotations:<ul>
     *     <li>@Parameters({ "good-username", "blocked-password" })</li>
     *     <li>@SISRATest</li>
     * </ul>
     *
     * @param usr   The {@code good-username} TestNG parameter.
     * @param pwd   The {@code blocked-password} TestNG parameter.
     */
    @Parameters({ "good-username", "blocked-password" })
    @Test
    public void validUserBlockedPassword(String usr, String pwd) {
        loginPage.with(usr, pwd);
        try {
            loginPage.waitForValidationMessages(VERY_SHORT_TIMEOUT);
            List<WebElement> valMessages = loginPage.getValidationMessages();
            assertThat("There should be a single validation message...",
                    valMessages.size(),is(1));
            assertThat("The 'user name or password is incorrect' validation message should be shown...",
                    valMessages.get(0).getText(), is(valMessage_BadUserOrPassword));
        } catch (TimeoutException e) {
            Assert.fail("Validation Message List not displayed.");
        }
    }

    /**
     * Uses the "good-username" parameter of the TestNG test and the empty String to
     * attempt to log in to Analytics. <br>
     * Fails if: <ul>
     *     <li>A single validation messages is not displayed after the login form is
     *     submitted.</li>
     *     <li>The displayed validation message does not match {@link #valMessage_NoPassword}</li>
     * </ul>
     * TestNG Annotations:<ul>
     *     <li>@Parameters({ "good-username" })</li>
     *     <li>@SISRATest</li>
     * </ul>
     *
     * @param usr   The {@code good-username} TestNG parameter.
     */
    @Parameters({ "good-username" })
    @Test
    public void validUserNoPassword(String usr) {
        loginPage.with(usr, "");
        try {
            loginPage.waitForValidationMessages(VERY_SHORT_TIMEOUT);
            List<WebElement> valMessages = loginPage.getValidationMessages();
            assertThat("There should be a single validation message...",
                    valMessages.size(),is(1));
            assertThat("The 'enter a password' validation message should be shown...",
                    valMessages.get(0).getText(), is(valMessage_NoPassword));
        } catch (TimeoutException e) {
            Assert.fail("Validation Message List not displayed.");
        }
    }

    // Four test methods using the "bad" username...

    /**
     * Uses the "bad-username" and "good-password" parameters of the TestNG test to
     * attempt to log in to Analytics. <br>
     * Fails if: <ul>
     *     <li>A single validation messages is not displayed after the login form is
     *     submitted.</li>
     *     <li>The displayed validation message does not match {@link #valMessage_BadUserOrPassword}</li>
     * </ul>
     * TestNG Annotations:<ul>
     *     <li>@Parameters({ "bad-username", "good-password" })</li>
     *     <li>@SISRATest</li>
     * </ul>
     *
     * @param usr   The {@code bad-username} TestNG parameter.
     * @param pwd   The {@code good-password} TestNG parameter.
     */
    @Parameters({ "bad-username", "good-password" })
    @Test
    public void invalidUserGoodPassword(String usr, String pwd) {
        loginPage.with(usr, pwd);
        try {
            loginPage.waitForValidationMessages(VERY_SHORT_TIMEOUT);
            List<WebElement> valMessages = loginPage.getValidationMessages();
            assertThat("There should be a single validation message...",
                    valMessages.size(),is(1));
            assertThat("The 'user name or password is incorrect' validation message should be shown...",
                    valMessages.get(0).getText(), is(valMessage_BadUserOrPassword));
        } catch (TimeoutException e) {
            Assert.fail("Validation Message List not displayed.");
        }
    }

    /**
     * Uses the "bad-username" parameter of the TestNG test and a random String to
     * attempt to log in to Analytics. <br>
     * Fails if: <ul>
     *     <li>A single validation messages is not displayed after the login form is
     *     submitted.</li>
     *     <li>The displayed validation message does not match {@link #valMessage_BadUserOrPassword}</li>
     * </ul>
     * TestNG Annotations:<ul>
     *     <li>@Parameters({ "bad-username" })</li>
     *     <li>@SISRATest</li>
     * </ul>
     *
     * @param usr   The {@code bad-username} TestNG parameter.
     */
    @Parameters({ "bad-username" })
    @Test
    public void invalidUserBadPassword(String usr) {
        String pwd = PasswordGenerator.getPassword(true, true);
        log("Using generated password: '" + pwd + "'");
        loginPage.with(usr, pwd);
        try {
            loginPage.waitForValidationMessages(VERY_SHORT_TIMEOUT);
            List<WebElement> valMessages = loginPage.getValidationMessages();
            assertThat("There should be a single validation message...",
                    valMessages.size(),is(1));
            assertThat("The 'user name or password is incorrect' validation message should be shown...",
                    valMessages.get(0).getText(), is(valMessage_BadUserOrPassword));
        } catch (TimeoutException e) {
            Assert.fail("Validation Message List not displayed.");
        }
    }

    /**
     * Uses the "bad-username" and "blocked-password" parameters of the TestNG test to
     * attempt to log in to Analytics. <br>
     * Fails if: <ul>
     *     <li>A single validation messages is not displayed after the login form is
     *     submitted.</li>
     *     <li>The displayed validation message does not match {@link #valMessage_BadUserOrPassword}</li>
     * </ul>
     * TestNG Annotations:<ul>
     *     <li>@Parameters({ "bad-username", "blocked-password" })</li>
     *     <li>@SISRATest</li>
     * </ul>
     *
     * @param usr   The {@code bad-username} TestNG parameter.
     * @param pwd   The {@code blocked-password} TestNG parameter.
     */
    @Parameters({ "bad-username", "blocked-password" })
    @Test
    public void invalidUserBlockedPassword(String usr, String pwd) {
        loginPage.with(usr, pwd);
        try {
            loginPage.waitForValidationMessages(VERY_SHORT_TIMEOUT);
            List<WebElement> valMessages = loginPage.getValidationMessages();
            assertThat("There should be a single validation message...",
                    valMessages.size(),is(1));
            assertThat("The 'user name or password is incorrect' validation message should be shown...",
                    valMessages.get(0).getText(), is(valMessage_BadUserOrPassword));
        } catch (TimeoutException e) {
            Assert.fail("Validation Message List not displayed.");
        }
    }

    /**
     * Uses the "bad-username" parameter of the TestNG test and the empty String to
     * attempt to log in to Analytics. <br>
     * Fails if: <ul>
     *     <li>A single validation messages is not displayed after the login form is
     *     submitted.</li>
     *     <li>The displayed validation message does not match {@link #valMessage_NoPassword}</li>
     * </ul>
     * TestNG Annotations:<ul>
     *     <li>@Parameters({ "bad-username" })</li>
     *     <li>@SISRATest</li>
     * </ul>
     *
     * @param usr   The {@code bad-username} TestNG parameter.
     */
    @Parameters({ "bad-username" })
    @Test
    public void invalidUserNoPassword(String usr) {
        loginPage.with(usr, "");
        try {
            loginPage.waitForValidationMessages(VERY_SHORT_TIMEOUT);
            List<WebElement> valMessages = loginPage.getValidationMessages();
            assertThat("There should be a single validation message...",
                    valMessages.size(),is(1));
            assertThat("The 'enter a password' validation message should be shown...",
                    valMessages.get(0).getText(), is(valMessage_NoPassword));
        } catch (TimeoutException e) {
            Assert.fail("Validation Message List not displayed.");
        }
    }

    // Four test methods using the "blocked" username...

    /**
     * Uses the "blocked-username" and "good-password" parameters of the TestNG test to
     * attempt to log in to Analytics. <br>
     * Fails if: <ul>
     *     <li>The "Logout Message" banner is not displayed at the top of the login page.</li>
     *     <li>The "Logout Message" does not match {@link #blockedUserMessage}</li>
     * </ul>
     * TestNG Annotations:<ul>
     *     <li>@Parameters({ "blocked-username", "good-password" })</li>
     *     <li>@SISRATest</li>
     * </ul>
     *
     * @param usr   The {@code blocked-username} TestNG parameter.
     * @param pwd   The {@code good-password} TestNG parameter.
     */
    @Parameters({ "blocked-username", "good-password" })
    @Test
    public void blockedUserGoodPassword(String usr, String pwd) {
        loginPage.with(usr, pwd);
        try {
            WebElement logoutMessage = loginPage.waitForLogoutMessage(VERY_SHORT_TIMEOUT);
            assertThat("The ''Your account has been blocked' message should be shown...",
                    logoutMessage.getText().trim(), is(blockedUserMessage));
        } catch (TimeoutException e) {
            Assert.fail("Blocked Account message was not displayed.");
        }
    }

    /**
     * Uses the "blocked-username" and "blocked-password" parameters of the TestNG test to
     * attempt to log in to Analytics. <br>
     * Fails if: <ul>
     *     <li>The "Logout Message" banner is not displayed at the top of the login page.</li>
     *     <li>The "Logout Message" does not match {@link #blockedUserMessage}</li>
     * </ul>
     * TestNG Annotations:<ul>
     *     <li>@Parameters({ "blocked-username", "blocked-password" })</li>
     *     <li>@SISRATest</li>
     * </ul>
     *
     * @param usr   The {@code blocked-username} TestNG parameter.
     * @param pwd   The {@code blocked-password} TestNG parameter.
     */
    @Parameters({ "blocked-username", "blocked-password" })
    @Test
    public void blockedUserValidPassword(String usr, String pwd) {
        loginPage.with(usr, pwd);
        try {
            WebElement logoutMessage = loginPage.waitForLogoutMessage(VERY_SHORT_TIMEOUT);
            assertThat("The ''Your account has been blocked' message should be shown...",
                    logoutMessage.getText().trim(), is(blockedUserMessage));
        } catch (TimeoutException e) {
            Assert.fail("Blocked Account message was not displayed.");
        }
    }

    /**
     * Uses the "blocked-username" parameter of the TestNG test and a random String to
     * attempt to log in to Analytics. <br>
     * Fails if: <ul>
     *     <li>The "Logout Message" banner is not displayed at the top of the login page.</li>
     *     <li>The "Logout Message" does not match {@link #blockedUserMessage}</li>
     * </ul>
     * TestNG Annotations:<ul>
     *     <li>@Parameters({ "blocked-username" })</li>
     *     <li>@SISRATest</li>
     * </ul>
     *
     * @param usr   The {@code blocked-username} TestNG parameter.
     */
    @Parameters({ "blocked-username" })
    @Test
    public void blockedUserBadPassword(String usr) {
        String pwd = PasswordGenerator.getPassword(true, true);
        log("Using generated password: '" + pwd + "'");
        loginPage.with(usr, pwd);
        try {
            WebElement logoutMessage = loginPage.waitForLogoutMessage(VERY_SHORT_TIMEOUT);
            assertThat("The ''Your account has been blocked' message should be shown...",
                    logoutMessage.getText().trim(), is(blockedUserMessage));
        } catch (TimeoutException e) {
            Assert.fail("Blocked Account message was not displayed.");
        }
    }

    /**
     * Uses the "blocked-username" parameter of the TestNG test and the empty String to
     * attempt to log in to Analytics. <br>
     * Fails if: <ul>
     *     <li>A single validation messages is not displayed after the login form is
     *     submitted.</li>
     *     <li>The displayed validation message does not match {@link #valMessage_NoPassword}</li>
     * </ul>
     * TestNG Annotations:<ul>
     *     <li>@Parameters({ "blocked-username" })</li>
     *     <li>@SISRATest</li>
     * </ul>
     *
     * @param usr   The {@code blocked-username} TestNG parameter.
     */
    @Parameters({ "blocked-username" })
    @Test
    public void blockedUserNoPassword(String usr) {
        loginPage.with(usr, "");
        try {
            loginPage.waitForValidationMessages(VERY_SHORT_TIMEOUT);
            List<WebElement> valMessages = loginPage.getValidationMessages();
            assertThat("The validation message list should contain one entry...",
                    valMessages.size(), is(1));
            assertThat("The 'enter a password' validation message is shown...",
                    valMessages.get(0).getText(), is(valMessage_NoPassword));
        } catch (TimeoutException e) {
            Assert.fail("Validation Message List not displayed.");
        }
    }

    // Four test methods using an empty username String...

    /**
     * Uses an empty String and the "good-password" parameter of the TestNG test to
     * attempt to log in to Analytics. <br>
     * Fails if: <ul>
     *     <li>A single validation messages is not displayed after the login form is
     *     submitted.</li>
     *     <li>The displayed validation message does not match {@link #valMessage_NoUsername}</li>
     * </ul>
     * TestNG Annotations:<ul>
     *     <li>@Parameters({ "good-username" })</li>
     *     <li>@SISRATest</li>
     * </ul>
     *
     * @param pwd   The {@code good-password} TestNG parameter.
     */
    @Parameters ({"good-password"})
    @Test
    public void noUserGoodPassword(String pwd) {
        loginPage.with("", pwd);
        try {
            loginPage.waitForValidationMessages(VERY_SHORT_TIMEOUT);
            List<WebElement> valMessages = loginPage.getValidationMessages();
            assertThat("The validation message list should contain one entry...",
                    valMessages.size(), is(1));
            assertThat("The 'enter a username' validation message is shown...",
                    valMessages.get(0).getText(), is(valMessage_NoUsername));
        } catch (TimeoutException e) {
            Assert.fail("Validation Message List not displayed.");
        }
    }

    /**
     * Uses an empty String and a random String to attempt to log in to Analytics. <br>
     * Fails if: <ul>
     *     <li>A single validation messages is not displayed after the login form is
     *     submitted.</li>
     *     <li>The displayed validation message does not match {@link #valMessage_NoUsername}</li>
     * </ul>
     * TestNG Annotations: @SISRATest
     */
    @Test
    public void noUserBadPassword() {
        String pwd = PasswordGenerator.getPassword(true, true);
        log("Using generated password: '" + pwd + "'");
        loginPage.with("", pwd);
        try {
            loginPage.waitForValidationMessages(VERY_SHORT_TIMEOUT);
            List<WebElement> valMessages = loginPage.getValidationMessages();
            assertThat("The validation message list should contain one entry...",
                    valMessages.size(), is(1));
            assertThat("The 'enter a username' validation message is shown...",
                    valMessages.get(0).getText(), is(valMessage_NoUsername));
        } catch (TimeoutException e) {
            Assert.fail("Validation Message List not displayed.");
        }
    }

    /**
     * Uses an empty String and the "blocked-password" parameter of the TestNG test to
     * attempt to log in to Analytics. <br>
     * Fails if: <ul>
     *     <li>A single validation messages is not displayed after the login form is
     *     submitted.</li>
     *     <li>The displayed validation message does not match {@link #valMessage_NoUsername}</li>
     * </ul>
     * TestNG Annotations:<ul>
     *     <li>@Parameters({ "blocked-password" })</li>
     *     <li>@SISRATest</li>
     * </ul>
     *
     * @param pwd   The {@code good-username} TestNG parameter.
     */
    @Parameters ({"blocked-password"})
    @Test
    public void noUserBlockedPassword(String pwd) {
        loginPage.with("", pwd);
        try {
            loginPage.waitForValidationMessages(VERY_SHORT_TIMEOUT);
            List<WebElement> valMessages = loginPage.getValidationMessages();
            assertThat("The validation message list should contain one entry...",
                    valMessages.size(), is(1));
            assertThat("The 'enter a username' validation message is shown...",
                    valMessages.get(0).getText(), is(valMessage_NoUsername));
        } catch (TimeoutException e) {
            Assert.fail("Validation Message List not displayed.");
        }
    }

    /**
     * Uses two empty Strings to attempt to log in to Analytics. <br>
     * Fails if: <ul>
     *     <li>Two validation messages are not displayed after the login form is
     *     submitted.</li>
     *     <li>The first validation message does not match {@link #valMessage_NoUsername}</li>
     *     <li>The second validation message does not match {@link #valMessage_NoPassword}</li>
     * </ul>
     * TestNG Annotations: @SISRATest
     */
    @Test
    public void noUserNoPassword() {
        loginPage.with("", "");
        try {
            loginPage.waitForValidationMessages(VERY_SHORT_TIMEOUT);
            List<WebElement> valMessages = loginPage.getValidationMessages();
            assertThat("The validation message list should contain two entries...",
                    valMessages.size(), is(2));
            assertThat("The 'enter a username' validation message is shown...",
                    valMessages.get(0).getText(), is(valMessage_NoUsername));
            assertThat("The 'enter a password' validation message is shown...",
                    valMessages.get(1).getText(), is(valMessage_NoPassword));
        } catch (TimeoutException e) {
            Assert.fail("Validation Message List not displayed.");
        }
    }

    // Tear down methods...

    /**
     * If an {@link AnalyticsDriver} was successfully started for the test, quits the driver
     * and logs the session ID, then logs test completion.
     * TestNG Annotations: @AfterTest
     */
    @AfterTest(alwaysRun = true)
    public void tearDownTest() {
        if (driver != null) {
            log("Closing RemoteWebDriver session: " + driver.getSessionId().toString());
            driver.quit();
        }
        long diff = (System.currentTimeMillis() - testStart)/1000;
        log("Test completed in "+Long.toString(diff)+" secs");
    }

    /**
     * Simply logs that the suite has completed.
     * TestNG Annotations: @AfterSuite
     */
    @AfterSuite
    public void tearDownSuite() {
        logPrefix = null;
        long difference = (System.currentTimeMillis() - suiteStart)/1000;
        log("Suite Timed At: " + Long.toString(difference)+" secs");
    }

    /****
     * Private methods only below this line-------------------------------------
     */
    private void log(String msg){
        final DateFormat dateFormat = new SimpleDateFormat("HH:mm:ss");
        String dateStr = dateFormat.format(new Date());
        String datedMessage;
        if (logPrefix == null)
            datedMessage = "[" + dateStr + "] - " + msg;
        else
            datedMessage = "[" + dateStr + "] - " + logPrefix + msg;

        TEST_LOGGER.info(datedMessage);
    }
}
